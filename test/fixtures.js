const isNumberFixtures = [
  0xff,
  5e3, // 5*10^3
  0,
  0.1,
  -0.1,
  -1.1,
  37,
  3.14,
  1,
  1.1,
  10,
  10.1,
  100,
  -100,
  '0.1',
  '-0.1',
  '-1.1',
  '0',
  '012',
  '0xff',
  '1',
  '1.1',
  '10',
  '10.10',
  '100',
  '5e3',
  '   56\r\n  ',
  Math.LN2, // 012, Octal literal not allowed in strict mode // issue#3
  parseInt('012'),
  parseFloat('012'),
  Math.abs(1), // 绝对值，特殊例子: Math.abs([1]) === 1
  Math.acos(1), // 反余弦
  Math.asin(1), // 反正弦
  Math.atan(1), // 反正切
  Math.atan2(1, 2), // 反正切
  Math.ceil(1), // 返回大于等于x的最小整数
  Math.cos(1), // 余弦
  Math.E, // 这是一个欧拉常数和自然对数的基数，约为 2.718
  Math.exp(1), // 返回e的指定次幂的值。
  Math.floor(1), // 返回小于等于x的最大整数
  Math.LN10,
  Math.LN2,
  Math.log(1),
  Math.LOG10E,
  Math.LOG2E,
  Math.max(1, 2),
  Math.min(1, 2),
  Math.PI,
  Math.pow(1, 2),
  Math.pow(5, 5),
  Math.random(1),
  Math.round(1), // 四舍五入
  Math.sin(1),
  Math.sqrt(1), // 求平方根
  Math.SQRT1_2, // 返回1/2平方根
  Math.SQRT2, // 返回2的平方根
  Math.tan(1),
  Number.MAX_VALUE,
  Number.MIN_VALUE,
  '0.0',
  '0x0',
  '0e+5',
  '000',
  '0.0e-5',
  '0.0E5',
  +'',
  +1,
  +3.14,
  +37,
  +5,
  +[],
  +Boolean(true),
  +false,
  +Math.LN2,
  +String(100),
  +true,
  +null,
  +Number(1),
  +new Array(''),
  +new Array(''),
  +new Boolean(true),
  +new Buffer(''),
  +new Date(),
  +new Date()
]

const isNotNumberFixtures = [
  '    ',
  '\r\n\t',
  '',
  '3a',
  'abc',
  'false',
  'null',
  'true',
  'undefined',
  +'abc',
  +/foo/,
  +[1, 2, 4],
  +function () {},
  +function () {},
  +function () {},
  +Infinity,
  +Math.sin,
  +NaN,
  +new Array('abc'),
  +new Array(2),
  +new RegExp('foo'),
  +new String('abc'),
  +String('foo'),
  +undefined,
  +{ a: 1 },
  +{},
  // Symbol('foo'), // issue#3 // issue#3
  // Symbol(),
  // Symbol.iterator,
  /foo/,
  [1, 2, 3],
  [1],
  [],
  Boolean(true),
  false,
  function () {},
  function () {},
  function () {},
  Infinity,
  Math.sin,
  NaN,
  new Array(''),
  new Array('abc'),
  new Array(0),
  new Boolean(true),
  new Buffer(''),
  new Buffer('abc'),
  new Date(),
  new RegExp('foo'),
  new String('abc'),
  null,
  String('abc'),
  true,
  undefined,
  { a: 1 },
  { abc: 'abc' },
  {}
]

module.exports = {
  isNumber: isNumberFixtures,
  isNotNumber: isNotNumberFixtures
}
